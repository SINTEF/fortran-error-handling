! SPDX-FileCopyrightText: 2022 SINTEF Ocean
! SPDX-License-Identifier: MIT

!! Types extending result_t for (some) primitive types
module error_handling_experimental_result
    use iso_fortran_env, only: sp => real32, dp => real64
    use error_mod, only: error_t
    use error_handling, only: wrap_error
    implicit none

#:set type_kinds = [('real', 'sp'), ('real', 'dp'), ('complex', 'sp'), ('complex', 'dp'), ('integer', None), ('logical', None)]
#:set ranks = [0, 1, 2, 3, 4]

    private
    public result_t
    public result_chars_t
#:for item in type_kinds
  #:for rank in ranks
    #:set name = item[0]
    #:set kind = item[1]
    #:set tmp = '{}_{}'.format(name, kind) if kind else name
    #:set suffix = '{}_rank{}'.format(tmp, rank) if rank > 0 else tmp
    public result_${suffix}$_t
    #:endfor
#:endfor
    public wrap_error


    interface wrap_error
        module procedure wrap_error_result_message
        module procedure wrap_error_result_error
    end interface


    type, abstract :: result_t
        class(error_t), allocatable :: error
    contains
        procedure :: is_error
    end type


    type, extends(result_t) :: result_chars_t
        character(len=:), allocatable :: value
    contains
        generic :: assignment(=) => assign_chars, assign_chars_error

        procedure, private :: assign_chars
        procedure, private :: assign_chars_error
    end type


#:for item in type_kinds
  #:for rank in ranks
    #:set name = item[0]
    #:set kind = item[1]
    #:set tmp = '{}_{}'.format(name, kind) if kind else name
    #:set suffix = '{}_rank{}'.format(tmp, rank) if rank > 0 else tmp
    #:set typename = '{}({})'.format(name, kind) if kind else name
    #:set dim = '({})'.format(','.join([':'] * rank)) if rank else ''
    type, extends(result_t) :: result_${suffix}$_t
        ${typename}$, allocatable :: value${dim}$
    contains
        generic :: assignment(=) => assign_${suffix}$, assign_error_${suffix}$

        procedure, private :: assign_${suffix}$
        procedure, private :: assign_error_${suffix}$
    end type


    #:endfor
#:endfor
contains


    logical pure function is_error(this)
        class(result_t), intent(in) :: this

        is_error = allocated(this%error)
    end function


    pure subroutine assign_chars(lhs, rhs)
        class(result_chars_t), intent(inout) :: lhs
        character(len=*), intent(in) :: rhs

        lhs%value = rhs
    end subroutine


    pure subroutine assign_chars_error(lhs, rhs)
        class(result_chars_t), intent(inout) :: lhs
        class(error_t), intent(in) :: rhs

        lhs%error = rhs
    end subroutine


#:for item in type_kinds
  #:for rank in ranks
    #:set name = item[0]
    #:set kind = item[1]
    #:set tmp = '{}_{}'.format(name, kind) if kind else name
    #:set suffix = '{}_rank{}'.format(tmp, rank) if rank > 0 else tmp
    #:set typename = '{}({})'.format(name, kind) if kind else name
    #:set dim = '({})'.format(','.join([':'] * rank)) if rank else ''
    pure subroutine assign_${suffix}$(lhs, rhs)
        class(result_${suffix}$_t), intent(inout) :: lhs
        ${typename}$, intent(in) :: rhs${dim}$

        lhs%value = rhs
    end subroutine


    pure subroutine assign_error_${suffix}$(lhs, rhs)
        class(result_${suffix}$_t), intent(inout) :: lhs
        class(error_t), intent(in) :: rhs

        lhs%error = rhs
    end subroutine


    #:endfor
#:endfor
    pure subroutine wrap_error_result_message(res, message)
        class(result_t), intent(inout) :: res
        character(len=*), intent(in) :: message

        call wrap_error(res%error, message)
    end subroutine


    pure subroutine wrap_error_result_error(res, error)
        class(result_t), intent(inout) :: res
        class(error_t), intent(in) :: error

        call wrap_error(res%error, error)
    end subroutine

end module